# Makefile.in generated by automake 1.11.1 from Makefile.am.
# common_audio/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/webrtc
pkgincludedir = $(includedir)/webrtc
pkglibdir = $(libdir)/webrtc
pkglibexecdir = $(libexecdir)/webrtc
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
subdir = common_audio
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in depcomp \
	install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)"
LIBRARIES = $(lib_LIBRARIES)
AR = ar
ARFLAGS = cru
libcommon_audio_a_AR = $(AR) $(ARFLAGS)
libcommon_audio_a_LIBADD =
am_libcommon_audio_a_OBJECTS = audio_converter.$(OBJEXT) \
	audio_util.$(OBJEXT) blocker.$(OBJEXT) fir_filter.$(OBJEXT) \
	fir_filter_sse.$(OBJEXT) wav_file.$(OBJEXT) \
	wav_header.$(OBJEXT) window_generator.$(OBJEXT) \
	ring_buffer.$(OBJEXT) lapped_transform.$(OBJEXT) \
	real_fourier.$(OBJEXT) push_resampler.$(OBJEXT) \
	push_sinc_resampler.$(OBJEXT) resampler.$(OBJEXT) \
	sinc_resampler.$(OBJEXT) sinc_resampler_sse.$(OBJEXT) \
	sinusoidal_linear_chirp_source.$(OBJEXT) \
	auto_correlation.$(OBJEXT) auto_corr_to_refl_coef.$(OBJEXT) \
	complex_bit_reverse.$(OBJEXT) complex_fft.$(OBJEXT) \
	copy_set_operations.$(OBJEXT) cross_correlation.$(OBJEXT) \
	division_operations.$(OBJEXT) dot_product_with_scale.$(OBJEXT) \
	downsample_fast.$(OBJEXT) energy.$(OBJEXT) filter_ar.$(OBJEXT) \
	filter_ar_fast_q12.$(OBJEXT) filter_ma_fast_q12.$(OBJEXT) \
	get_hanning_window.$(OBJEXT) get_scaling_square.$(OBJEXT) \
	ilbc_specific_functions.$(OBJEXT) levinson_durbin.$(OBJEXT) \
	lpc_to_refl_coef.$(OBJEXT) min_max_operations.$(OBJEXT) \
	randomization_functions.$(OBJEXT) real_fft.$(OBJEXT) \
	refl_coef_to_lpc.$(OBJEXT) resample_48khz.$(OBJEXT) \
	resample_by_2.$(OBJEXT) resample_by_2_internal.$(OBJEXT) \
	resample.$(OBJEXT) resample_fractional.$(OBJEXT) \
	spl_init.$(OBJEXT) splitting_filter.$(OBJEXT) \
	spl_sqrt.$(OBJEXT) spl_sqrt_floor.$(OBJEXT) \
	sqrt_of_one_minus_x_squared.$(OBJEXT) \
	vector_scaling_operations.$(OBJEXT) vad_core.$(OBJEXT) \
	vad_filterbank.$(OBJEXT) vad_gmm.$(OBJEXT) vad_sp.$(OBJEXT) \
	webrtc_vad.$(OBJEXT) vad.$(OBJEXT)
libcommon_audio_a_OBJECTS = $(am_libcommon_audio_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(libcommon_audio_a_SOURCES)
DIST_SOURCES = $(libcommon_audio_a_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/missing --run tar
AUTOCONF = ${SHELL} /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/missing --run autoconf
AUTOHEADER = ${SHELL} /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/missing --run autoheader
AUTOMAKE = ${SHELL} /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -D_DEBUG -DWEBRTC_POSIX -DWEBRTC_LINUX -std=gnu++11
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = webrtc
PACKAGE_BUGREPORT = BUG-REPORT-ADDRESS
PACKAGE_NAME = webrtc
PACKAGE_STRING = webrtc VERSION
PACKAGE_TARNAME = webrtc
PACKAGE_VERSION = VERSION
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 1.0
XMKMF = 
abs_builddir = /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/common_audio
abs_srcdir = /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/common_audio
abs_top_builddir = /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc
abs_top_srcdir = /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/RTChatServer/webRTC_xCode/webRTCAPP/Classes/webrtc/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AUTOMAKE_OPTIONS = foreign
lib_LIBRARIES = libcommon_audio.a
INCLUDES = -I../../ -I../../third_party/openmax_dl/
libcommon_audio_a_SOURCES = audio_converter.cc audio_util.cc \
	blocker.cc fir_filter.cc fir_filter_sse.cc wav_file.cc \
	wav_header.cc window_generator.cc ring_buffer.c \
	lapped_transform.cc real_fourier.cc \
	resampler/push_resampler.cc resampler/push_sinc_resampler.cc \
	resampler/resampler.cc resampler/sinc_resampler.cc \
	resampler/sinc_resampler_sse.cc \
	resampler/sinusoidal_linear_chirp_source.cc \
	signal_processing/auto_correlation.c \
	signal_processing/auto_corr_to_refl_coef.c \
	signal_processing/complex_bit_reverse.c \
	signal_processing/complex_fft.c \
	signal_processing/copy_set_operations.c \
	signal_processing/cross_correlation.c \
	signal_processing/division_operations.c \
	signal_processing/dot_product_with_scale.c \
	signal_processing/downsample_fast.c signal_processing/energy.c \
	signal_processing/filter_ar.c \
	signal_processing/filter_ar_fast_q12.c \
	signal_processing/filter_ma_fast_q12.c \
	signal_processing/get_hanning_window.c \
	signal_processing/get_scaling_square.c \
	signal_processing/ilbc_specific_functions.c \
	signal_processing/levinson_durbin.c \
	signal_processing/lpc_to_refl_coef.c \
	signal_processing/min_max_operations.c \
	signal_processing/randomization_functions.c \
	signal_processing/real_fft.c \
	signal_processing/refl_coef_to_lpc.c \
	signal_processing/resample_48khz.c \
	signal_processing/resample_by_2.c \
	signal_processing/resample_by_2_internal.c \
	signal_processing/resample.c \
	signal_processing/resample_fractional.c \
	signal_processing/spl_init.c \
	signal_processing/splitting_filter.c \
	signal_processing/spl_sqrt.c \
	signal_processing/spl_sqrt_floor.c \
	signal_processing/sqrt_of_one_minus_x_squared.c \
	signal_processing/vector_scaling_operations.c vad/vad_core.c \
	vad/vad_filterbank.c vad/vad_gmm.c vad/vad_sp.c \
	vad/webrtc_vad.c vad/vad.cc
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cc .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign common_audio/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign common_audio/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(INSTALL_DATA) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(INSTALL_DATA) $$list2 "$(DESTDIR)$(libdir)" || exit $$?; }
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  if test -f $$p; then \
	    $(am__strip_dir) \
	    echo " ( cd '$(DESTDIR)$(libdir)' && $(RANLIB) $$f )"; \
	    ( cd "$(DESTDIR)$(libdir)" && $(RANLIB) $$f ) || exit $$?; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libdir)' && rm -f "$$files" )"; \
	cd "$(DESTDIR)$(libdir)" && rm -f $$files

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
libcommon_audio.a: $(libcommon_audio_a_OBJECTS) $(libcommon_audio_a_DEPENDENCIES) 
	-rm -f libcommon_audio.a
	$(libcommon_audio_a_AR) libcommon_audio.a $(libcommon_audio_a_OBJECTS) $(libcommon_audio_a_LIBADD)
	$(RANLIB) libcommon_audio.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/audio_converter.Po
include ./$(DEPDIR)/audio_util.Po
include ./$(DEPDIR)/auto_corr_to_refl_coef.Po
include ./$(DEPDIR)/auto_correlation.Po
include ./$(DEPDIR)/blocker.Po
include ./$(DEPDIR)/complex_bit_reverse.Po
include ./$(DEPDIR)/complex_fft.Po
include ./$(DEPDIR)/copy_set_operations.Po
include ./$(DEPDIR)/cross_correlation.Po
include ./$(DEPDIR)/division_operations.Po
include ./$(DEPDIR)/dot_product_with_scale.Po
include ./$(DEPDIR)/downsample_fast.Po
include ./$(DEPDIR)/energy.Po
include ./$(DEPDIR)/filter_ar.Po
include ./$(DEPDIR)/filter_ar_fast_q12.Po
include ./$(DEPDIR)/filter_ma_fast_q12.Po
include ./$(DEPDIR)/fir_filter.Po
include ./$(DEPDIR)/fir_filter_sse.Po
include ./$(DEPDIR)/get_hanning_window.Po
include ./$(DEPDIR)/get_scaling_square.Po
include ./$(DEPDIR)/ilbc_specific_functions.Po
include ./$(DEPDIR)/lapped_transform.Po
include ./$(DEPDIR)/levinson_durbin.Po
include ./$(DEPDIR)/lpc_to_refl_coef.Po
include ./$(DEPDIR)/min_max_operations.Po
include ./$(DEPDIR)/push_resampler.Po
include ./$(DEPDIR)/push_sinc_resampler.Po
include ./$(DEPDIR)/randomization_functions.Po
include ./$(DEPDIR)/real_fft.Po
include ./$(DEPDIR)/real_fourier.Po
include ./$(DEPDIR)/refl_coef_to_lpc.Po
include ./$(DEPDIR)/resample.Po
include ./$(DEPDIR)/resample_48khz.Po
include ./$(DEPDIR)/resample_by_2.Po
include ./$(DEPDIR)/resample_by_2_internal.Po
include ./$(DEPDIR)/resample_fractional.Po
include ./$(DEPDIR)/resampler.Po
include ./$(DEPDIR)/ring_buffer.Po
include ./$(DEPDIR)/sinc_resampler.Po
include ./$(DEPDIR)/sinc_resampler_sse.Po
include ./$(DEPDIR)/sinusoidal_linear_chirp_source.Po
include ./$(DEPDIR)/spl_init.Po
include ./$(DEPDIR)/spl_sqrt.Po
include ./$(DEPDIR)/spl_sqrt_floor.Po
include ./$(DEPDIR)/splitting_filter.Po
include ./$(DEPDIR)/sqrt_of_one_minus_x_squared.Po
include ./$(DEPDIR)/vad.Po
include ./$(DEPDIR)/vad_core.Po
include ./$(DEPDIR)/vad_filterbank.Po
include ./$(DEPDIR)/vad_gmm.Po
include ./$(DEPDIR)/vad_sp.Po
include ./$(DEPDIR)/vector_scaling_operations.Po
include ./$(DEPDIR)/wav_file.Po
include ./$(DEPDIR)/wav_header.Po
include ./$(DEPDIR)/webrtc_vad.Po
include ./$(DEPDIR)/window_generator.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

auto_correlation.o: signal_processing/auto_correlation.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT auto_correlation.o -MD -MP -MF $(DEPDIR)/auto_correlation.Tpo -c -o auto_correlation.o `test -f 'signal_processing/auto_correlation.c' || echo '$(srcdir)/'`signal_processing/auto_correlation.c
	$(am__mv) $(DEPDIR)/auto_correlation.Tpo $(DEPDIR)/auto_correlation.Po
#	source='signal_processing/auto_correlation.c' object='auto_correlation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o auto_correlation.o `test -f 'signal_processing/auto_correlation.c' || echo '$(srcdir)/'`signal_processing/auto_correlation.c

auto_correlation.obj: signal_processing/auto_correlation.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT auto_correlation.obj -MD -MP -MF $(DEPDIR)/auto_correlation.Tpo -c -o auto_correlation.obj `if test -f 'signal_processing/auto_correlation.c'; then $(CYGPATH_W) 'signal_processing/auto_correlation.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/auto_correlation.c'; fi`
	$(am__mv) $(DEPDIR)/auto_correlation.Tpo $(DEPDIR)/auto_correlation.Po
#	source='signal_processing/auto_correlation.c' object='auto_correlation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o auto_correlation.obj `if test -f 'signal_processing/auto_correlation.c'; then $(CYGPATH_W) 'signal_processing/auto_correlation.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/auto_correlation.c'; fi`

auto_corr_to_refl_coef.o: signal_processing/auto_corr_to_refl_coef.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT auto_corr_to_refl_coef.o -MD -MP -MF $(DEPDIR)/auto_corr_to_refl_coef.Tpo -c -o auto_corr_to_refl_coef.o `test -f 'signal_processing/auto_corr_to_refl_coef.c' || echo '$(srcdir)/'`signal_processing/auto_corr_to_refl_coef.c
	$(am__mv) $(DEPDIR)/auto_corr_to_refl_coef.Tpo $(DEPDIR)/auto_corr_to_refl_coef.Po
#	source='signal_processing/auto_corr_to_refl_coef.c' object='auto_corr_to_refl_coef.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o auto_corr_to_refl_coef.o `test -f 'signal_processing/auto_corr_to_refl_coef.c' || echo '$(srcdir)/'`signal_processing/auto_corr_to_refl_coef.c

auto_corr_to_refl_coef.obj: signal_processing/auto_corr_to_refl_coef.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT auto_corr_to_refl_coef.obj -MD -MP -MF $(DEPDIR)/auto_corr_to_refl_coef.Tpo -c -o auto_corr_to_refl_coef.obj `if test -f 'signal_processing/auto_corr_to_refl_coef.c'; then $(CYGPATH_W) 'signal_processing/auto_corr_to_refl_coef.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/auto_corr_to_refl_coef.c'; fi`
	$(am__mv) $(DEPDIR)/auto_corr_to_refl_coef.Tpo $(DEPDIR)/auto_corr_to_refl_coef.Po
#	source='signal_processing/auto_corr_to_refl_coef.c' object='auto_corr_to_refl_coef.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o auto_corr_to_refl_coef.obj `if test -f 'signal_processing/auto_corr_to_refl_coef.c'; then $(CYGPATH_W) 'signal_processing/auto_corr_to_refl_coef.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/auto_corr_to_refl_coef.c'; fi`

complex_bit_reverse.o: signal_processing/complex_bit_reverse.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT complex_bit_reverse.o -MD -MP -MF $(DEPDIR)/complex_bit_reverse.Tpo -c -o complex_bit_reverse.o `test -f 'signal_processing/complex_bit_reverse.c' || echo '$(srcdir)/'`signal_processing/complex_bit_reverse.c
	$(am__mv) $(DEPDIR)/complex_bit_reverse.Tpo $(DEPDIR)/complex_bit_reverse.Po
#	source='signal_processing/complex_bit_reverse.c' object='complex_bit_reverse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o complex_bit_reverse.o `test -f 'signal_processing/complex_bit_reverse.c' || echo '$(srcdir)/'`signal_processing/complex_bit_reverse.c

complex_bit_reverse.obj: signal_processing/complex_bit_reverse.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT complex_bit_reverse.obj -MD -MP -MF $(DEPDIR)/complex_bit_reverse.Tpo -c -o complex_bit_reverse.obj `if test -f 'signal_processing/complex_bit_reverse.c'; then $(CYGPATH_W) 'signal_processing/complex_bit_reverse.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/complex_bit_reverse.c'; fi`
	$(am__mv) $(DEPDIR)/complex_bit_reverse.Tpo $(DEPDIR)/complex_bit_reverse.Po
#	source='signal_processing/complex_bit_reverse.c' object='complex_bit_reverse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o complex_bit_reverse.obj `if test -f 'signal_processing/complex_bit_reverse.c'; then $(CYGPATH_W) 'signal_processing/complex_bit_reverse.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/complex_bit_reverse.c'; fi`

complex_fft.o: signal_processing/complex_fft.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT complex_fft.o -MD -MP -MF $(DEPDIR)/complex_fft.Tpo -c -o complex_fft.o `test -f 'signal_processing/complex_fft.c' || echo '$(srcdir)/'`signal_processing/complex_fft.c
	$(am__mv) $(DEPDIR)/complex_fft.Tpo $(DEPDIR)/complex_fft.Po
#	source='signal_processing/complex_fft.c' object='complex_fft.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o complex_fft.o `test -f 'signal_processing/complex_fft.c' || echo '$(srcdir)/'`signal_processing/complex_fft.c

complex_fft.obj: signal_processing/complex_fft.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT complex_fft.obj -MD -MP -MF $(DEPDIR)/complex_fft.Tpo -c -o complex_fft.obj `if test -f 'signal_processing/complex_fft.c'; then $(CYGPATH_W) 'signal_processing/complex_fft.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/complex_fft.c'; fi`
	$(am__mv) $(DEPDIR)/complex_fft.Tpo $(DEPDIR)/complex_fft.Po
#	source='signal_processing/complex_fft.c' object='complex_fft.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o complex_fft.obj `if test -f 'signal_processing/complex_fft.c'; then $(CYGPATH_W) 'signal_processing/complex_fft.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/complex_fft.c'; fi`

copy_set_operations.o: signal_processing/copy_set_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT copy_set_operations.o -MD -MP -MF $(DEPDIR)/copy_set_operations.Tpo -c -o copy_set_operations.o `test -f 'signal_processing/copy_set_operations.c' || echo '$(srcdir)/'`signal_processing/copy_set_operations.c
	$(am__mv) $(DEPDIR)/copy_set_operations.Tpo $(DEPDIR)/copy_set_operations.Po
#	source='signal_processing/copy_set_operations.c' object='copy_set_operations.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o copy_set_operations.o `test -f 'signal_processing/copy_set_operations.c' || echo '$(srcdir)/'`signal_processing/copy_set_operations.c

copy_set_operations.obj: signal_processing/copy_set_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT copy_set_operations.obj -MD -MP -MF $(DEPDIR)/copy_set_operations.Tpo -c -o copy_set_operations.obj `if test -f 'signal_processing/copy_set_operations.c'; then $(CYGPATH_W) 'signal_processing/copy_set_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/copy_set_operations.c'; fi`
	$(am__mv) $(DEPDIR)/copy_set_operations.Tpo $(DEPDIR)/copy_set_operations.Po
#	source='signal_processing/copy_set_operations.c' object='copy_set_operations.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o copy_set_operations.obj `if test -f 'signal_processing/copy_set_operations.c'; then $(CYGPATH_W) 'signal_processing/copy_set_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/copy_set_operations.c'; fi`

cross_correlation.o: signal_processing/cross_correlation.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cross_correlation.o -MD -MP -MF $(DEPDIR)/cross_correlation.Tpo -c -o cross_correlation.o `test -f 'signal_processing/cross_correlation.c' || echo '$(srcdir)/'`signal_processing/cross_correlation.c
	$(am__mv) $(DEPDIR)/cross_correlation.Tpo $(DEPDIR)/cross_correlation.Po
#	source='signal_processing/cross_correlation.c' object='cross_correlation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cross_correlation.o `test -f 'signal_processing/cross_correlation.c' || echo '$(srcdir)/'`signal_processing/cross_correlation.c

cross_correlation.obj: signal_processing/cross_correlation.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cross_correlation.obj -MD -MP -MF $(DEPDIR)/cross_correlation.Tpo -c -o cross_correlation.obj `if test -f 'signal_processing/cross_correlation.c'; then $(CYGPATH_W) 'signal_processing/cross_correlation.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/cross_correlation.c'; fi`
	$(am__mv) $(DEPDIR)/cross_correlation.Tpo $(DEPDIR)/cross_correlation.Po
#	source='signal_processing/cross_correlation.c' object='cross_correlation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cross_correlation.obj `if test -f 'signal_processing/cross_correlation.c'; then $(CYGPATH_W) 'signal_processing/cross_correlation.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/cross_correlation.c'; fi`

division_operations.o: signal_processing/division_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT division_operations.o -MD -MP -MF $(DEPDIR)/division_operations.Tpo -c -o division_operations.o `test -f 'signal_processing/division_operations.c' || echo '$(srcdir)/'`signal_processing/division_operations.c
	$(am__mv) $(DEPDIR)/division_operations.Tpo $(DEPDIR)/division_operations.Po
#	source='signal_processing/division_operations.c' object='division_operations.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o division_operations.o `test -f 'signal_processing/division_operations.c' || echo '$(srcdir)/'`signal_processing/division_operations.c

division_operations.obj: signal_processing/division_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT division_operations.obj -MD -MP -MF $(DEPDIR)/division_operations.Tpo -c -o division_operations.obj `if test -f 'signal_processing/division_operations.c'; then $(CYGPATH_W) 'signal_processing/division_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/division_operations.c'; fi`
	$(am__mv) $(DEPDIR)/division_operations.Tpo $(DEPDIR)/division_operations.Po
#	source='signal_processing/division_operations.c' object='division_operations.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o division_operations.obj `if test -f 'signal_processing/division_operations.c'; then $(CYGPATH_W) 'signal_processing/division_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/division_operations.c'; fi`

dot_product_with_scale.o: signal_processing/dot_product_with_scale.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT dot_product_with_scale.o -MD -MP -MF $(DEPDIR)/dot_product_with_scale.Tpo -c -o dot_product_with_scale.o `test -f 'signal_processing/dot_product_with_scale.c' || echo '$(srcdir)/'`signal_processing/dot_product_with_scale.c
	$(am__mv) $(DEPDIR)/dot_product_with_scale.Tpo $(DEPDIR)/dot_product_with_scale.Po
#	source='signal_processing/dot_product_with_scale.c' object='dot_product_with_scale.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dot_product_with_scale.o `test -f 'signal_processing/dot_product_with_scale.c' || echo '$(srcdir)/'`signal_processing/dot_product_with_scale.c

dot_product_with_scale.obj: signal_processing/dot_product_with_scale.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT dot_product_with_scale.obj -MD -MP -MF $(DEPDIR)/dot_product_with_scale.Tpo -c -o dot_product_with_scale.obj `if test -f 'signal_processing/dot_product_with_scale.c'; then $(CYGPATH_W) 'signal_processing/dot_product_with_scale.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/dot_product_with_scale.c'; fi`
	$(am__mv) $(DEPDIR)/dot_product_with_scale.Tpo $(DEPDIR)/dot_product_with_scale.Po
#	source='signal_processing/dot_product_with_scale.c' object='dot_product_with_scale.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dot_product_with_scale.obj `if test -f 'signal_processing/dot_product_with_scale.c'; then $(CYGPATH_W) 'signal_processing/dot_product_with_scale.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/dot_product_with_scale.c'; fi`

downsample_fast.o: signal_processing/downsample_fast.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT downsample_fast.o -MD -MP -MF $(DEPDIR)/downsample_fast.Tpo -c -o downsample_fast.o `test -f 'signal_processing/downsample_fast.c' || echo '$(srcdir)/'`signal_processing/downsample_fast.c
	$(am__mv) $(DEPDIR)/downsample_fast.Tpo $(DEPDIR)/downsample_fast.Po
#	source='signal_processing/downsample_fast.c' object='downsample_fast.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o downsample_fast.o `test -f 'signal_processing/downsample_fast.c' || echo '$(srcdir)/'`signal_processing/downsample_fast.c

downsample_fast.obj: signal_processing/downsample_fast.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT downsample_fast.obj -MD -MP -MF $(DEPDIR)/downsample_fast.Tpo -c -o downsample_fast.obj `if test -f 'signal_processing/downsample_fast.c'; then $(CYGPATH_W) 'signal_processing/downsample_fast.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/downsample_fast.c'; fi`
	$(am__mv) $(DEPDIR)/downsample_fast.Tpo $(DEPDIR)/downsample_fast.Po
#	source='signal_processing/downsample_fast.c' object='downsample_fast.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o downsample_fast.obj `if test -f 'signal_processing/downsample_fast.c'; then $(CYGPATH_W) 'signal_processing/downsample_fast.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/downsample_fast.c'; fi`

energy.o: signal_processing/energy.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT energy.o -MD -MP -MF $(DEPDIR)/energy.Tpo -c -o energy.o `test -f 'signal_processing/energy.c' || echo '$(srcdir)/'`signal_processing/energy.c
	$(am__mv) $(DEPDIR)/energy.Tpo $(DEPDIR)/energy.Po
#	source='signal_processing/energy.c' object='energy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o energy.o `test -f 'signal_processing/energy.c' || echo '$(srcdir)/'`signal_processing/energy.c

energy.obj: signal_processing/energy.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT energy.obj -MD -MP -MF $(DEPDIR)/energy.Tpo -c -o energy.obj `if test -f 'signal_processing/energy.c'; then $(CYGPATH_W) 'signal_processing/energy.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/energy.c'; fi`
	$(am__mv) $(DEPDIR)/energy.Tpo $(DEPDIR)/energy.Po
#	source='signal_processing/energy.c' object='energy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o energy.obj `if test -f 'signal_processing/energy.c'; then $(CYGPATH_W) 'signal_processing/energy.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/energy.c'; fi`

filter_ar.o: signal_processing/filter_ar.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT filter_ar.o -MD -MP -MF $(DEPDIR)/filter_ar.Tpo -c -o filter_ar.o `test -f 'signal_processing/filter_ar.c' || echo '$(srcdir)/'`signal_processing/filter_ar.c
	$(am__mv) $(DEPDIR)/filter_ar.Tpo $(DEPDIR)/filter_ar.Po
#	source='signal_processing/filter_ar.c' object='filter_ar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o filter_ar.o `test -f 'signal_processing/filter_ar.c' || echo '$(srcdir)/'`signal_processing/filter_ar.c

filter_ar.obj: signal_processing/filter_ar.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT filter_ar.obj -MD -MP -MF $(DEPDIR)/filter_ar.Tpo -c -o filter_ar.obj `if test -f 'signal_processing/filter_ar.c'; then $(CYGPATH_W) 'signal_processing/filter_ar.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/filter_ar.c'; fi`
	$(am__mv) $(DEPDIR)/filter_ar.Tpo $(DEPDIR)/filter_ar.Po
#	source='signal_processing/filter_ar.c' object='filter_ar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o filter_ar.obj `if test -f 'signal_processing/filter_ar.c'; then $(CYGPATH_W) 'signal_processing/filter_ar.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/filter_ar.c'; fi`

filter_ar_fast_q12.o: signal_processing/filter_ar_fast_q12.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT filter_ar_fast_q12.o -MD -MP -MF $(DEPDIR)/filter_ar_fast_q12.Tpo -c -o filter_ar_fast_q12.o `test -f 'signal_processing/filter_ar_fast_q12.c' || echo '$(srcdir)/'`signal_processing/filter_ar_fast_q12.c
	$(am__mv) $(DEPDIR)/filter_ar_fast_q12.Tpo $(DEPDIR)/filter_ar_fast_q12.Po
#	source='signal_processing/filter_ar_fast_q12.c' object='filter_ar_fast_q12.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o filter_ar_fast_q12.o `test -f 'signal_processing/filter_ar_fast_q12.c' || echo '$(srcdir)/'`signal_processing/filter_ar_fast_q12.c

filter_ar_fast_q12.obj: signal_processing/filter_ar_fast_q12.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT filter_ar_fast_q12.obj -MD -MP -MF $(DEPDIR)/filter_ar_fast_q12.Tpo -c -o filter_ar_fast_q12.obj `if test -f 'signal_processing/filter_ar_fast_q12.c'; then $(CYGPATH_W) 'signal_processing/filter_ar_fast_q12.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/filter_ar_fast_q12.c'; fi`
	$(am__mv) $(DEPDIR)/filter_ar_fast_q12.Tpo $(DEPDIR)/filter_ar_fast_q12.Po
#	source='signal_processing/filter_ar_fast_q12.c' object='filter_ar_fast_q12.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o filter_ar_fast_q12.obj `if test -f 'signal_processing/filter_ar_fast_q12.c'; then $(CYGPATH_W) 'signal_processing/filter_ar_fast_q12.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/filter_ar_fast_q12.c'; fi`

filter_ma_fast_q12.o: signal_processing/filter_ma_fast_q12.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT filter_ma_fast_q12.o -MD -MP -MF $(DEPDIR)/filter_ma_fast_q12.Tpo -c -o filter_ma_fast_q12.o `test -f 'signal_processing/filter_ma_fast_q12.c' || echo '$(srcdir)/'`signal_processing/filter_ma_fast_q12.c
	$(am__mv) $(DEPDIR)/filter_ma_fast_q12.Tpo $(DEPDIR)/filter_ma_fast_q12.Po
#	source='signal_processing/filter_ma_fast_q12.c' object='filter_ma_fast_q12.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o filter_ma_fast_q12.o `test -f 'signal_processing/filter_ma_fast_q12.c' || echo '$(srcdir)/'`signal_processing/filter_ma_fast_q12.c

filter_ma_fast_q12.obj: signal_processing/filter_ma_fast_q12.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT filter_ma_fast_q12.obj -MD -MP -MF $(DEPDIR)/filter_ma_fast_q12.Tpo -c -o filter_ma_fast_q12.obj `if test -f 'signal_processing/filter_ma_fast_q12.c'; then $(CYGPATH_W) 'signal_processing/filter_ma_fast_q12.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/filter_ma_fast_q12.c'; fi`
	$(am__mv) $(DEPDIR)/filter_ma_fast_q12.Tpo $(DEPDIR)/filter_ma_fast_q12.Po
#	source='signal_processing/filter_ma_fast_q12.c' object='filter_ma_fast_q12.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o filter_ma_fast_q12.obj `if test -f 'signal_processing/filter_ma_fast_q12.c'; then $(CYGPATH_W) 'signal_processing/filter_ma_fast_q12.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/filter_ma_fast_q12.c'; fi`

get_hanning_window.o: signal_processing/get_hanning_window.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT get_hanning_window.o -MD -MP -MF $(DEPDIR)/get_hanning_window.Tpo -c -o get_hanning_window.o `test -f 'signal_processing/get_hanning_window.c' || echo '$(srcdir)/'`signal_processing/get_hanning_window.c
	$(am__mv) $(DEPDIR)/get_hanning_window.Tpo $(DEPDIR)/get_hanning_window.Po
#	source='signal_processing/get_hanning_window.c' object='get_hanning_window.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o get_hanning_window.o `test -f 'signal_processing/get_hanning_window.c' || echo '$(srcdir)/'`signal_processing/get_hanning_window.c

get_hanning_window.obj: signal_processing/get_hanning_window.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT get_hanning_window.obj -MD -MP -MF $(DEPDIR)/get_hanning_window.Tpo -c -o get_hanning_window.obj `if test -f 'signal_processing/get_hanning_window.c'; then $(CYGPATH_W) 'signal_processing/get_hanning_window.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/get_hanning_window.c'; fi`
	$(am__mv) $(DEPDIR)/get_hanning_window.Tpo $(DEPDIR)/get_hanning_window.Po
#	source='signal_processing/get_hanning_window.c' object='get_hanning_window.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o get_hanning_window.obj `if test -f 'signal_processing/get_hanning_window.c'; then $(CYGPATH_W) 'signal_processing/get_hanning_window.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/get_hanning_window.c'; fi`

get_scaling_square.o: signal_processing/get_scaling_square.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT get_scaling_square.o -MD -MP -MF $(DEPDIR)/get_scaling_square.Tpo -c -o get_scaling_square.o `test -f 'signal_processing/get_scaling_square.c' || echo '$(srcdir)/'`signal_processing/get_scaling_square.c
	$(am__mv) $(DEPDIR)/get_scaling_square.Tpo $(DEPDIR)/get_scaling_square.Po
#	source='signal_processing/get_scaling_square.c' object='get_scaling_square.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o get_scaling_square.o `test -f 'signal_processing/get_scaling_square.c' || echo '$(srcdir)/'`signal_processing/get_scaling_square.c

get_scaling_square.obj: signal_processing/get_scaling_square.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT get_scaling_square.obj -MD -MP -MF $(DEPDIR)/get_scaling_square.Tpo -c -o get_scaling_square.obj `if test -f 'signal_processing/get_scaling_square.c'; then $(CYGPATH_W) 'signal_processing/get_scaling_square.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/get_scaling_square.c'; fi`
	$(am__mv) $(DEPDIR)/get_scaling_square.Tpo $(DEPDIR)/get_scaling_square.Po
#	source='signal_processing/get_scaling_square.c' object='get_scaling_square.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o get_scaling_square.obj `if test -f 'signal_processing/get_scaling_square.c'; then $(CYGPATH_W) 'signal_processing/get_scaling_square.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/get_scaling_square.c'; fi`

ilbc_specific_functions.o: signal_processing/ilbc_specific_functions.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ilbc_specific_functions.o -MD -MP -MF $(DEPDIR)/ilbc_specific_functions.Tpo -c -o ilbc_specific_functions.o `test -f 'signal_processing/ilbc_specific_functions.c' || echo '$(srcdir)/'`signal_processing/ilbc_specific_functions.c
	$(am__mv) $(DEPDIR)/ilbc_specific_functions.Tpo $(DEPDIR)/ilbc_specific_functions.Po
#	source='signal_processing/ilbc_specific_functions.c' object='ilbc_specific_functions.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ilbc_specific_functions.o `test -f 'signal_processing/ilbc_specific_functions.c' || echo '$(srcdir)/'`signal_processing/ilbc_specific_functions.c

ilbc_specific_functions.obj: signal_processing/ilbc_specific_functions.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ilbc_specific_functions.obj -MD -MP -MF $(DEPDIR)/ilbc_specific_functions.Tpo -c -o ilbc_specific_functions.obj `if test -f 'signal_processing/ilbc_specific_functions.c'; then $(CYGPATH_W) 'signal_processing/ilbc_specific_functions.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/ilbc_specific_functions.c'; fi`
	$(am__mv) $(DEPDIR)/ilbc_specific_functions.Tpo $(DEPDIR)/ilbc_specific_functions.Po
#	source='signal_processing/ilbc_specific_functions.c' object='ilbc_specific_functions.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ilbc_specific_functions.obj `if test -f 'signal_processing/ilbc_specific_functions.c'; then $(CYGPATH_W) 'signal_processing/ilbc_specific_functions.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/ilbc_specific_functions.c'; fi`

levinson_durbin.o: signal_processing/levinson_durbin.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT levinson_durbin.o -MD -MP -MF $(DEPDIR)/levinson_durbin.Tpo -c -o levinson_durbin.o `test -f 'signal_processing/levinson_durbin.c' || echo '$(srcdir)/'`signal_processing/levinson_durbin.c
	$(am__mv) $(DEPDIR)/levinson_durbin.Tpo $(DEPDIR)/levinson_durbin.Po
#	source='signal_processing/levinson_durbin.c' object='levinson_durbin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o levinson_durbin.o `test -f 'signal_processing/levinson_durbin.c' || echo '$(srcdir)/'`signal_processing/levinson_durbin.c

levinson_durbin.obj: signal_processing/levinson_durbin.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT levinson_durbin.obj -MD -MP -MF $(DEPDIR)/levinson_durbin.Tpo -c -o levinson_durbin.obj `if test -f 'signal_processing/levinson_durbin.c'; then $(CYGPATH_W) 'signal_processing/levinson_durbin.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/levinson_durbin.c'; fi`
	$(am__mv) $(DEPDIR)/levinson_durbin.Tpo $(DEPDIR)/levinson_durbin.Po
#	source='signal_processing/levinson_durbin.c' object='levinson_durbin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o levinson_durbin.obj `if test -f 'signal_processing/levinson_durbin.c'; then $(CYGPATH_W) 'signal_processing/levinson_durbin.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/levinson_durbin.c'; fi`

lpc_to_refl_coef.o: signal_processing/lpc_to_refl_coef.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lpc_to_refl_coef.o -MD -MP -MF $(DEPDIR)/lpc_to_refl_coef.Tpo -c -o lpc_to_refl_coef.o `test -f 'signal_processing/lpc_to_refl_coef.c' || echo '$(srcdir)/'`signal_processing/lpc_to_refl_coef.c
	$(am__mv) $(DEPDIR)/lpc_to_refl_coef.Tpo $(DEPDIR)/lpc_to_refl_coef.Po
#	source='signal_processing/lpc_to_refl_coef.c' object='lpc_to_refl_coef.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lpc_to_refl_coef.o `test -f 'signal_processing/lpc_to_refl_coef.c' || echo '$(srcdir)/'`signal_processing/lpc_to_refl_coef.c

lpc_to_refl_coef.obj: signal_processing/lpc_to_refl_coef.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lpc_to_refl_coef.obj -MD -MP -MF $(DEPDIR)/lpc_to_refl_coef.Tpo -c -o lpc_to_refl_coef.obj `if test -f 'signal_processing/lpc_to_refl_coef.c'; then $(CYGPATH_W) 'signal_processing/lpc_to_refl_coef.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/lpc_to_refl_coef.c'; fi`
	$(am__mv) $(DEPDIR)/lpc_to_refl_coef.Tpo $(DEPDIR)/lpc_to_refl_coef.Po
#	source='signal_processing/lpc_to_refl_coef.c' object='lpc_to_refl_coef.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lpc_to_refl_coef.obj `if test -f 'signal_processing/lpc_to_refl_coef.c'; then $(CYGPATH_W) 'signal_processing/lpc_to_refl_coef.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/lpc_to_refl_coef.c'; fi`

min_max_operations.o: signal_processing/min_max_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT min_max_operations.o -MD -MP -MF $(DEPDIR)/min_max_operations.Tpo -c -o min_max_operations.o `test -f 'signal_processing/min_max_operations.c' || echo '$(srcdir)/'`signal_processing/min_max_operations.c
	$(am__mv) $(DEPDIR)/min_max_operations.Tpo $(DEPDIR)/min_max_operations.Po
#	source='signal_processing/min_max_operations.c' object='min_max_operations.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o min_max_operations.o `test -f 'signal_processing/min_max_operations.c' || echo '$(srcdir)/'`signal_processing/min_max_operations.c

min_max_operations.obj: signal_processing/min_max_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT min_max_operations.obj -MD -MP -MF $(DEPDIR)/min_max_operations.Tpo -c -o min_max_operations.obj `if test -f 'signal_processing/min_max_operations.c'; then $(CYGPATH_W) 'signal_processing/min_max_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/min_max_operations.c'; fi`
	$(am__mv) $(DEPDIR)/min_max_operations.Tpo $(DEPDIR)/min_max_operations.Po
#	source='signal_processing/min_max_operations.c' object='min_max_operations.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o min_max_operations.obj `if test -f 'signal_processing/min_max_operations.c'; then $(CYGPATH_W) 'signal_processing/min_max_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/min_max_operations.c'; fi`

randomization_functions.o: signal_processing/randomization_functions.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT randomization_functions.o -MD -MP -MF $(DEPDIR)/randomization_functions.Tpo -c -o randomization_functions.o `test -f 'signal_processing/randomization_functions.c' || echo '$(srcdir)/'`signal_processing/randomization_functions.c
	$(am__mv) $(DEPDIR)/randomization_functions.Tpo $(DEPDIR)/randomization_functions.Po
#	source='signal_processing/randomization_functions.c' object='randomization_functions.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o randomization_functions.o `test -f 'signal_processing/randomization_functions.c' || echo '$(srcdir)/'`signal_processing/randomization_functions.c

randomization_functions.obj: signal_processing/randomization_functions.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT randomization_functions.obj -MD -MP -MF $(DEPDIR)/randomization_functions.Tpo -c -o randomization_functions.obj `if test -f 'signal_processing/randomization_functions.c'; then $(CYGPATH_W) 'signal_processing/randomization_functions.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/randomization_functions.c'; fi`
	$(am__mv) $(DEPDIR)/randomization_functions.Tpo $(DEPDIR)/randomization_functions.Po
#	source='signal_processing/randomization_functions.c' object='randomization_functions.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o randomization_functions.obj `if test -f 'signal_processing/randomization_functions.c'; then $(CYGPATH_W) 'signal_processing/randomization_functions.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/randomization_functions.c'; fi`

real_fft.o: signal_processing/real_fft.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT real_fft.o -MD -MP -MF $(DEPDIR)/real_fft.Tpo -c -o real_fft.o `test -f 'signal_processing/real_fft.c' || echo '$(srcdir)/'`signal_processing/real_fft.c
	$(am__mv) $(DEPDIR)/real_fft.Tpo $(DEPDIR)/real_fft.Po
#	source='signal_processing/real_fft.c' object='real_fft.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o real_fft.o `test -f 'signal_processing/real_fft.c' || echo '$(srcdir)/'`signal_processing/real_fft.c

real_fft.obj: signal_processing/real_fft.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT real_fft.obj -MD -MP -MF $(DEPDIR)/real_fft.Tpo -c -o real_fft.obj `if test -f 'signal_processing/real_fft.c'; then $(CYGPATH_W) 'signal_processing/real_fft.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/real_fft.c'; fi`
	$(am__mv) $(DEPDIR)/real_fft.Tpo $(DEPDIR)/real_fft.Po
#	source='signal_processing/real_fft.c' object='real_fft.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o real_fft.obj `if test -f 'signal_processing/real_fft.c'; then $(CYGPATH_W) 'signal_processing/real_fft.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/real_fft.c'; fi`

refl_coef_to_lpc.o: signal_processing/refl_coef_to_lpc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT refl_coef_to_lpc.o -MD -MP -MF $(DEPDIR)/refl_coef_to_lpc.Tpo -c -o refl_coef_to_lpc.o `test -f 'signal_processing/refl_coef_to_lpc.c' || echo '$(srcdir)/'`signal_processing/refl_coef_to_lpc.c
	$(am__mv) $(DEPDIR)/refl_coef_to_lpc.Tpo $(DEPDIR)/refl_coef_to_lpc.Po
#	source='signal_processing/refl_coef_to_lpc.c' object='refl_coef_to_lpc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o refl_coef_to_lpc.o `test -f 'signal_processing/refl_coef_to_lpc.c' || echo '$(srcdir)/'`signal_processing/refl_coef_to_lpc.c

refl_coef_to_lpc.obj: signal_processing/refl_coef_to_lpc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT refl_coef_to_lpc.obj -MD -MP -MF $(DEPDIR)/refl_coef_to_lpc.Tpo -c -o refl_coef_to_lpc.obj `if test -f 'signal_processing/refl_coef_to_lpc.c'; then $(CYGPATH_W) 'signal_processing/refl_coef_to_lpc.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/refl_coef_to_lpc.c'; fi`
	$(am__mv) $(DEPDIR)/refl_coef_to_lpc.Tpo $(DEPDIR)/refl_coef_to_lpc.Po
#	source='signal_processing/refl_coef_to_lpc.c' object='refl_coef_to_lpc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o refl_coef_to_lpc.obj `if test -f 'signal_processing/refl_coef_to_lpc.c'; then $(CYGPATH_W) 'signal_processing/refl_coef_to_lpc.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/refl_coef_to_lpc.c'; fi`

resample_48khz.o: signal_processing/resample_48khz.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_48khz.o -MD -MP -MF $(DEPDIR)/resample_48khz.Tpo -c -o resample_48khz.o `test -f 'signal_processing/resample_48khz.c' || echo '$(srcdir)/'`signal_processing/resample_48khz.c
	$(am__mv) $(DEPDIR)/resample_48khz.Tpo $(DEPDIR)/resample_48khz.Po
#	source='signal_processing/resample_48khz.c' object='resample_48khz.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_48khz.o `test -f 'signal_processing/resample_48khz.c' || echo '$(srcdir)/'`signal_processing/resample_48khz.c

resample_48khz.obj: signal_processing/resample_48khz.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_48khz.obj -MD -MP -MF $(DEPDIR)/resample_48khz.Tpo -c -o resample_48khz.obj `if test -f 'signal_processing/resample_48khz.c'; then $(CYGPATH_W) 'signal_processing/resample_48khz.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_48khz.c'; fi`
	$(am__mv) $(DEPDIR)/resample_48khz.Tpo $(DEPDIR)/resample_48khz.Po
#	source='signal_processing/resample_48khz.c' object='resample_48khz.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_48khz.obj `if test -f 'signal_processing/resample_48khz.c'; then $(CYGPATH_W) 'signal_processing/resample_48khz.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_48khz.c'; fi`

resample_by_2.o: signal_processing/resample_by_2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_by_2.o -MD -MP -MF $(DEPDIR)/resample_by_2.Tpo -c -o resample_by_2.o `test -f 'signal_processing/resample_by_2.c' || echo '$(srcdir)/'`signal_processing/resample_by_2.c
	$(am__mv) $(DEPDIR)/resample_by_2.Tpo $(DEPDIR)/resample_by_2.Po
#	source='signal_processing/resample_by_2.c' object='resample_by_2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_by_2.o `test -f 'signal_processing/resample_by_2.c' || echo '$(srcdir)/'`signal_processing/resample_by_2.c

resample_by_2.obj: signal_processing/resample_by_2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_by_2.obj -MD -MP -MF $(DEPDIR)/resample_by_2.Tpo -c -o resample_by_2.obj `if test -f 'signal_processing/resample_by_2.c'; then $(CYGPATH_W) 'signal_processing/resample_by_2.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_by_2.c'; fi`
	$(am__mv) $(DEPDIR)/resample_by_2.Tpo $(DEPDIR)/resample_by_2.Po
#	source='signal_processing/resample_by_2.c' object='resample_by_2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_by_2.obj `if test -f 'signal_processing/resample_by_2.c'; then $(CYGPATH_W) 'signal_processing/resample_by_2.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_by_2.c'; fi`

resample_by_2_internal.o: signal_processing/resample_by_2_internal.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_by_2_internal.o -MD -MP -MF $(DEPDIR)/resample_by_2_internal.Tpo -c -o resample_by_2_internal.o `test -f 'signal_processing/resample_by_2_internal.c' || echo '$(srcdir)/'`signal_processing/resample_by_2_internal.c
	$(am__mv) $(DEPDIR)/resample_by_2_internal.Tpo $(DEPDIR)/resample_by_2_internal.Po
#	source='signal_processing/resample_by_2_internal.c' object='resample_by_2_internal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_by_2_internal.o `test -f 'signal_processing/resample_by_2_internal.c' || echo '$(srcdir)/'`signal_processing/resample_by_2_internal.c

resample_by_2_internal.obj: signal_processing/resample_by_2_internal.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_by_2_internal.obj -MD -MP -MF $(DEPDIR)/resample_by_2_internal.Tpo -c -o resample_by_2_internal.obj `if test -f 'signal_processing/resample_by_2_internal.c'; then $(CYGPATH_W) 'signal_processing/resample_by_2_internal.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_by_2_internal.c'; fi`
	$(am__mv) $(DEPDIR)/resample_by_2_internal.Tpo $(DEPDIR)/resample_by_2_internal.Po
#	source='signal_processing/resample_by_2_internal.c' object='resample_by_2_internal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_by_2_internal.obj `if test -f 'signal_processing/resample_by_2_internal.c'; then $(CYGPATH_W) 'signal_processing/resample_by_2_internal.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_by_2_internal.c'; fi`

resample.o: signal_processing/resample.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample.o -MD -MP -MF $(DEPDIR)/resample.Tpo -c -o resample.o `test -f 'signal_processing/resample.c' || echo '$(srcdir)/'`signal_processing/resample.c
	$(am__mv) $(DEPDIR)/resample.Tpo $(DEPDIR)/resample.Po
#	source='signal_processing/resample.c' object='resample.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample.o `test -f 'signal_processing/resample.c' || echo '$(srcdir)/'`signal_processing/resample.c

resample.obj: signal_processing/resample.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample.obj -MD -MP -MF $(DEPDIR)/resample.Tpo -c -o resample.obj `if test -f 'signal_processing/resample.c'; then $(CYGPATH_W) 'signal_processing/resample.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample.c'; fi`
	$(am__mv) $(DEPDIR)/resample.Tpo $(DEPDIR)/resample.Po
#	source='signal_processing/resample.c' object='resample.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample.obj `if test -f 'signal_processing/resample.c'; then $(CYGPATH_W) 'signal_processing/resample.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample.c'; fi`

resample_fractional.o: signal_processing/resample_fractional.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_fractional.o -MD -MP -MF $(DEPDIR)/resample_fractional.Tpo -c -o resample_fractional.o `test -f 'signal_processing/resample_fractional.c' || echo '$(srcdir)/'`signal_processing/resample_fractional.c
	$(am__mv) $(DEPDIR)/resample_fractional.Tpo $(DEPDIR)/resample_fractional.Po
#	source='signal_processing/resample_fractional.c' object='resample_fractional.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_fractional.o `test -f 'signal_processing/resample_fractional.c' || echo '$(srcdir)/'`signal_processing/resample_fractional.c

resample_fractional.obj: signal_processing/resample_fractional.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT resample_fractional.obj -MD -MP -MF $(DEPDIR)/resample_fractional.Tpo -c -o resample_fractional.obj `if test -f 'signal_processing/resample_fractional.c'; then $(CYGPATH_W) 'signal_processing/resample_fractional.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_fractional.c'; fi`
	$(am__mv) $(DEPDIR)/resample_fractional.Tpo $(DEPDIR)/resample_fractional.Po
#	source='signal_processing/resample_fractional.c' object='resample_fractional.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o resample_fractional.obj `if test -f 'signal_processing/resample_fractional.c'; then $(CYGPATH_W) 'signal_processing/resample_fractional.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/resample_fractional.c'; fi`

spl_init.o: signal_processing/spl_init.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spl_init.o -MD -MP -MF $(DEPDIR)/spl_init.Tpo -c -o spl_init.o `test -f 'signal_processing/spl_init.c' || echo '$(srcdir)/'`signal_processing/spl_init.c
	$(am__mv) $(DEPDIR)/spl_init.Tpo $(DEPDIR)/spl_init.Po
#	source='signal_processing/spl_init.c' object='spl_init.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spl_init.o `test -f 'signal_processing/spl_init.c' || echo '$(srcdir)/'`signal_processing/spl_init.c

spl_init.obj: signal_processing/spl_init.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spl_init.obj -MD -MP -MF $(DEPDIR)/spl_init.Tpo -c -o spl_init.obj `if test -f 'signal_processing/spl_init.c'; then $(CYGPATH_W) 'signal_processing/spl_init.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/spl_init.c'; fi`
	$(am__mv) $(DEPDIR)/spl_init.Tpo $(DEPDIR)/spl_init.Po
#	source='signal_processing/spl_init.c' object='spl_init.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spl_init.obj `if test -f 'signal_processing/spl_init.c'; then $(CYGPATH_W) 'signal_processing/spl_init.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/spl_init.c'; fi`

splitting_filter.o: signal_processing/splitting_filter.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT splitting_filter.o -MD -MP -MF $(DEPDIR)/splitting_filter.Tpo -c -o splitting_filter.o `test -f 'signal_processing/splitting_filter.c' || echo '$(srcdir)/'`signal_processing/splitting_filter.c
	$(am__mv) $(DEPDIR)/splitting_filter.Tpo $(DEPDIR)/splitting_filter.Po
#	source='signal_processing/splitting_filter.c' object='splitting_filter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o splitting_filter.o `test -f 'signal_processing/splitting_filter.c' || echo '$(srcdir)/'`signal_processing/splitting_filter.c

splitting_filter.obj: signal_processing/splitting_filter.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT splitting_filter.obj -MD -MP -MF $(DEPDIR)/splitting_filter.Tpo -c -o splitting_filter.obj `if test -f 'signal_processing/splitting_filter.c'; then $(CYGPATH_W) 'signal_processing/splitting_filter.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/splitting_filter.c'; fi`
	$(am__mv) $(DEPDIR)/splitting_filter.Tpo $(DEPDIR)/splitting_filter.Po
#	source='signal_processing/splitting_filter.c' object='splitting_filter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o splitting_filter.obj `if test -f 'signal_processing/splitting_filter.c'; then $(CYGPATH_W) 'signal_processing/splitting_filter.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/splitting_filter.c'; fi`

spl_sqrt.o: signal_processing/spl_sqrt.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spl_sqrt.o -MD -MP -MF $(DEPDIR)/spl_sqrt.Tpo -c -o spl_sqrt.o `test -f 'signal_processing/spl_sqrt.c' || echo '$(srcdir)/'`signal_processing/spl_sqrt.c
	$(am__mv) $(DEPDIR)/spl_sqrt.Tpo $(DEPDIR)/spl_sqrt.Po
#	source='signal_processing/spl_sqrt.c' object='spl_sqrt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spl_sqrt.o `test -f 'signal_processing/spl_sqrt.c' || echo '$(srcdir)/'`signal_processing/spl_sqrt.c

spl_sqrt.obj: signal_processing/spl_sqrt.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spl_sqrt.obj -MD -MP -MF $(DEPDIR)/spl_sqrt.Tpo -c -o spl_sqrt.obj `if test -f 'signal_processing/spl_sqrt.c'; then $(CYGPATH_W) 'signal_processing/spl_sqrt.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/spl_sqrt.c'; fi`
	$(am__mv) $(DEPDIR)/spl_sqrt.Tpo $(DEPDIR)/spl_sqrt.Po
#	source='signal_processing/spl_sqrt.c' object='spl_sqrt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spl_sqrt.obj `if test -f 'signal_processing/spl_sqrt.c'; then $(CYGPATH_W) 'signal_processing/spl_sqrt.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/spl_sqrt.c'; fi`

spl_sqrt_floor.o: signal_processing/spl_sqrt_floor.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spl_sqrt_floor.o -MD -MP -MF $(DEPDIR)/spl_sqrt_floor.Tpo -c -o spl_sqrt_floor.o `test -f 'signal_processing/spl_sqrt_floor.c' || echo '$(srcdir)/'`signal_processing/spl_sqrt_floor.c
	$(am__mv) $(DEPDIR)/spl_sqrt_floor.Tpo $(DEPDIR)/spl_sqrt_floor.Po
#	source='signal_processing/spl_sqrt_floor.c' object='spl_sqrt_floor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spl_sqrt_floor.o `test -f 'signal_processing/spl_sqrt_floor.c' || echo '$(srcdir)/'`signal_processing/spl_sqrt_floor.c

spl_sqrt_floor.obj: signal_processing/spl_sqrt_floor.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spl_sqrt_floor.obj -MD -MP -MF $(DEPDIR)/spl_sqrt_floor.Tpo -c -o spl_sqrt_floor.obj `if test -f 'signal_processing/spl_sqrt_floor.c'; then $(CYGPATH_W) 'signal_processing/spl_sqrt_floor.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/spl_sqrt_floor.c'; fi`
	$(am__mv) $(DEPDIR)/spl_sqrt_floor.Tpo $(DEPDIR)/spl_sqrt_floor.Po
#	source='signal_processing/spl_sqrt_floor.c' object='spl_sqrt_floor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spl_sqrt_floor.obj `if test -f 'signal_processing/spl_sqrt_floor.c'; then $(CYGPATH_W) 'signal_processing/spl_sqrt_floor.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/spl_sqrt_floor.c'; fi`

sqrt_of_one_minus_x_squared.o: signal_processing/sqrt_of_one_minus_x_squared.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sqrt_of_one_minus_x_squared.o -MD -MP -MF $(DEPDIR)/sqrt_of_one_minus_x_squared.Tpo -c -o sqrt_of_one_minus_x_squared.o `test -f 'signal_processing/sqrt_of_one_minus_x_squared.c' || echo '$(srcdir)/'`signal_processing/sqrt_of_one_minus_x_squared.c
	$(am__mv) $(DEPDIR)/sqrt_of_one_minus_x_squared.Tpo $(DEPDIR)/sqrt_of_one_minus_x_squared.Po
#	source='signal_processing/sqrt_of_one_minus_x_squared.c' object='sqrt_of_one_minus_x_squared.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sqrt_of_one_minus_x_squared.o `test -f 'signal_processing/sqrt_of_one_minus_x_squared.c' || echo '$(srcdir)/'`signal_processing/sqrt_of_one_minus_x_squared.c

sqrt_of_one_minus_x_squared.obj: signal_processing/sqrt_of_one_minus_x_squared.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sqrt_of_one_minus_x_squared.obj -MD -MP -MF $(DEPDIR)/sqrt_of_one_minus_x_squared.Tpo -c -o sqrt_of_one_minus_x_squared.obj `if test -f 'signal_processing/sqrt_of_one_minus_x_squared.c'; then $(CYGPATH_W) 'signal_processing/sqrt_of_one_minus_x_squared.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/sqrt_of_one_minus_x_squared.c'; fi`
	$(am__mv) $(DEPDIR)/sqrt_of_one_minus_x_squared.Tpo $(DEPDIR)/sqrt_of_one_minus_x_squared.Po
#	source='signal_processing/sqrt_of_one_minus_x_squared.c' object='sqrt_of_one_minus_x_squared.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sqrt_of_one_minus_x_squared.obj `if test -f 'signal_processing/sqrt_of_one_minus_x_squared.c'; then $(CYGPATH_W) 'signal_processing/sqrt_of_one_minus_x_squared.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/sqrt_of_one_minus_x_squared.c'; fi`

vector_scaling_operations.o: signal_processing/vector_scaling_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vector_scaling_operations.o -MD -MP -MF $(DEPDIR)/vector_scaling_operations.Tpo -c -o vector_scaling_operations.o `test -f 'signal_processing/vector_scaling_operations.c' || echo '$(srcdir)/'`signal_processing/vector_scaling_operations.c
	$(am__mv) $(DEPDIR)/vector_scaling_operations.Tpo $(DEPDIR)/vector_scaling_operations.Po
#	source='signal_processing/vector_scaling_operations.c' object='vector_scaling_operations.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vector_scaling_operations.o `test -f 'signal_processing/vector_scaling_operations.c' || echo '$(srcdir)/'`signal_processing/vector_scaling_operations.c

vector_scaling_operations.obj: signal_processing/vector_scaling_operations.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vector_scaling_operations.obj -MD -MP -MF $(DEPDIR)/vector_scaling_operations.Tpo -c -o vector_scaling_operations.obj `if test -f 'signal_processing/vector_scaling_operations.c'; then $(CYGPATH_W) 'signal_processing/vector_scaling_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/vector_scaling_operations.c'; fi`
	$(am__mv) $(DEPDIR)/vector_scaling_operations.Tpo $(DEPDIR)/vector_scaling_operations.Po
#	source='signal_processing/vector_scaling_operations.c' object='vector_scaling_operations.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vector_scaling_operations.obj `if test -f 'signal_processing/vector_scaling_operations.c'; then $(CYGPATH_W) 'signal_processing/vector_scaling_operations.c'; else $(CYGPATH_W) '$(srcdir)/signal_processing/vector_scaling_operations.c'; fi`

vad_core.o: vad/vad_core.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_core.o -MD -MP -MF $(DEPDIR)/vad_core.Tpo -c -o vad_core.o `test -f 'vad/vad_core.c' || echo '$(srcdir)/'`vad/vad_core.c
	$(am__mv) $(DEPDIR)/vad_core.Tpo $(DEPDIR)/vad_core.Po
#	source='vad/vad_core.c' object='vad_core.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_core.o `test -f 'vad/vad_core.c' || echo '$(srcdir)/'`vad/vad_core.c

vad_core.obj: vad/vad_core.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_core.obj -MD -MP -MF $(DEPDIR)/vad_core.Tpo -c -o vad_core.obj `if test -f 'vad/vad_core.c'; then $(CYGPATH_W) 'vad/vad_core.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_core.c'; fi`
	$(am__mv) $(DEPDIR)/vad_core.Tpo $(DEPDIR)/vad_core.Po
#	source='vad/vad_core.c' object='vad_core.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_core.obj `if test -f 'vad/vad_core.c'; then $(CYGPATH_W) 'vad/vad_core.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_core.c'; fi`

vad_filterbank.o: vad/vad_filterbank.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_filterbank.o -MD -MP -MF $(DEPDIR)/vad_filterbank.Tpo -c -o vad_filterbank.o `test -f 'vad/vad_filterbank.c' || echo '$(srcdir)/'`vad/vad_filterbank.c
	$(am__mv) $(DEPDIR)/vad_filterbank.Tpo $(DEPDIR)/vad_filterbank.Po
#	source='vad/vad_filterbank.c' object='vad_filterbank.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_filterbank.o `test -f 'vad/vad_filterbank.c' || echo '$(srcdir)/'`vad/vad_filterbank.c

vad_filterbank.obj: vad/vad_filterbank.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_filterbank.obj -MD -MP -MF $(DEPDIR)/vad_filterbank.Tpo -c -o vad_filterbank.obj `if test -f 'vad/vad_filterbank.c'; then $(CYGPATH_W) 'vad/vad_filterbank.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_filterbank.c'; fi`
	$(am__mv) $(DEPDIR)/vad_filterbank.Tpo $(DEPDIR)/vad_filterbank.Po
#	source='vad/vad_filterbank.c' object='vad_filterbank.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_filterbank.obj `if test -f 'vad/vad_filterbank.c'; then $(CYGPATH_W) 'vad/vad_filterbank.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_filterbank.c'; fi`

vad_gmm.o: vad/vad_gmm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_gmm.o -MD -MP -MF $(DEPDIR)/vad_gmm.Tpo -c -o vad_gmm.o `test -f 'vad/vad_gmm.c' || echo '$(srcdir)/'`vad/vad_gmm.c
	$(am__mv) $(DEPDIR)/vad_gmm.Tpo $(DEPDIR)/vad_gmm.Po
#	source='vad/vad_gmm.c' object='vad_gmm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_gmm.o `test -f 'vad/vad_gmm.c' || echo '$(srcdir)/'`vad/vad_gmm.c

vad_gmm.obj: vad/vad_gmm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_gmm.obj -MD -MP -MF $(DEPDIR)/vad_gmm.Tpo -c -o vad_gmm.obj `if test -f 'vad/vad_gmm.c'; then $(CYGPATH_W) 'vad/vad_gmm.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_gmm.c'; fi`
	$(am__mv) $(DEPDIR)/vad_gmm.Tpo $(DEPDIR)/vad_gmm.Po
#	source='vad/vad_gmm.c' object='vad_gmm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_gmm.obj `if test -f 'vad/vad_gmm.c'; then $(CYGPATH_W) 'vad/vad_gmm.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_gmm.c'; fi`

vad_sp.o: vad/vad_sp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_sp.o -MD -MP -MF $(DEPDIR)/vad_sp.Tpo -c -o vad_sp.o `test -f 'vad/vad_sp.c' || echo '$(srcdir)/'`vad/vad_sp.c
	$(am__mv) $(DEPDIR)/vad_sp.Tpo $(DEPDIR)/vad_sp.Po
#	source='vad/vad_sp.c' object='vad_sp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_sp.o `test -f 'vad/vad_sp.c' || echo '$(srcdir)/'`vad/vad_sp.c

vad_sp.obj: vad/vad_sp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT vad_sp.obj -MD -MP -MF $(DEPDIR)/vad_sp.Tpo -c -o vad_sp.obj `if test -f 'vad/vad_sp.c'; then $(CYGPATH_W) 'vad/vad_sp.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_sp.c'; fi`
	$(am__mv) $(DEPDIR)/vad_sp.Tpo $(DEPDIR)/vad_sp.Po
#	source='vad/vad_sp.c' object='vad_sp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o vad_sp.obj `if test -f 'vad/vad_sp.c'; then $(CYGPATH_W) 'vad/vad_sp.c'; else $(CYGPATH_W) '$(srcdir)/vad/vad_sp.c'; fi`

webrtc_vad.o: vad/webrtc_vad.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT webrtc_vad.o -MD -MP -MF $(DEPDIR)/webrtc_vad.Tpo -c -o webrtc_vad.o `test -f 'vad/webrtc_vad.c' || echo '$(srcdir)/'`vad/webrtc_vad.c
	$(am__mv) $(DEPDIR)/webrtc_vad.Tpo $(DEPDIR)/webrtc_vad.Po
#	source='vad/webrtc_vad.c' object='webrtc_vad.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o webrtc_vad.o `test -f 'vad/webrtc_vad.c' || echo '$(srcdir)/'`vad/webrtc_vad.c

webrtc_vad.obj: vad/webrtc_vad.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT webrtc_vad.obj -MD -MP -MF $(DEPDIR)/webrtc_vad.Tpo -c -o webrtc_vad.obj `if test -f 'vad/webrtc_vad.c'; then $(CYGPATH_W) 'vad/webrtc_vad.c'; else $(CYGPATH_W) '$(srcdir)/vad/webrtc_vad.c'; fi`
	$(am__mv) $(DEPDIR)/webrtc_vad.Tpo $(DEPDIR)/webrtc_vad.Po
#	source='vad/webrtc_vad.c' object='webrtc_vad.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o webrtc_vad.obj `if test -f 'vad/webrtc_vad.c'; then $(CYGPATH_W) 'vad/webrtc_vad.c'; else $(CYGPATH_W) '$(srcdir)/vad/webrtc_vad.c'; fi`

.cc.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

push_resampler.o: resampler/push_resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT push_resampler.o -MD -MP -MF $(DEPDIR)/push_resampler.Tpo -c -o push_resampler.o `test -f 'resampler/push_resampler.cc' || echo '$(srcdir)/'`resampler/push_resampler.cc
	$(am__mv) $(DEPDIR)/push_resampler.Tpo $(DEPDIR)/push_resampler.Po
#	source='resampler/push_resampler.cc' object='push_resampler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o push_resampler.o `test -f 'resampler/push_resampler.cc' || echo '$(srcdir)/'`resampler/push_resampler.cc

push_resampler.obj: resampler/push_resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT push_resampler.obj -MD -MP -MF $(DEPDIR)/push_resampler.Tpo -c -o push_resampler.obj `if test -f 'resampler/push_resampler.cc'; then $(CYGPATH_W) 'resampler/push_resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/push_resampler.cc'; fi`
	$(am__mv) $(DEPDIR)/push_resampler.Tpo $(DEPDIR)/push_resampler.Po
#	source='resampler/push_resampler.cc' object='push_resampler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o push_resampler.obj `if test -f 'resampler/push_resampler.cc'; then $(CYGPATH_W) 'resampler/push_resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/push_resampler.cc'; fi`

push_sinc_resampler.o: resampler/push_sinc_resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT push_sinc_resampler.o -MD -MP -MF $(DEPDIR)/push_sinc_resampler.Tpo -c -o push_sinc_resampler.o `test -f 'resampler/push_sinc_resampler.cc' || echo '$(srcdir)/'`resampler/push_sinc_resampler.cc
	$(am__mv) $(DEPDIR)/push_sinc_resampler.Tpo $(DEPDIR)/push_sinc_resampler.Po
#	source='resampler/push_sinc_resampler.cc' object='push_sinc_resampler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o push_sinc_resampler.o `test -f 'resampler/push_sinc_resampler.cc' || echo '$(srcdir)/'`resampler/push_sinc_resampler.cc

push_sinc_resampler.obj: resampler/push_sinc_resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT push_sinc_resampler.obj -MD -MP -MF $(DEPDIR)/push_sinc_resampler.Tpo -c -o push_sinc_resampler.obj `if test -f 'resampler/push_sinc_resampler.cc'; then $(CYGPATH_W) 'resampler/push_sinc_resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/push_sinc_resampler.cc'; fi`
	$(am__mv) $(DEPDIR)/push_sinc_resampler.Tpo $(DEPDIR)/push_sinc_resampler.Po
#	source='resampler/push_sinc_resampler.cc' object='push_sinc_resampler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o push_sinc_resampler.obj `if test -f 'resampler/push_sinc_resampler.cc'; then $(CYGPATH_W) 'resampler/push_sinc_resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/push_sinc_resampler.cc'; fi`

resampler.o: resampler/resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT resampler.o -MD -MP -MF $(DEPDIR)/resampler.Tpo -c -o resampler.o `test -f 'resampler/resampler.cc' || echo '$(srcdir)/'`resampler/resampler.cc
	$(am__mv) $(DEPDIR)/resampler.Tpo $(DEPDIR)/resampler.Po
#	source='resampler/resampler.cc' object='resampler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o resampler.o `test -f 'resampler/resampler.cc' || echo '$(srcdir)/'`resampler/resampler.cc

resampler.obj: resampler/resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT resampler.obj -MD -MP -MF $(DEPDIR)/resampler.Tpo -c -o resampler.obj `if test -f 'resampler/resampler.cc'; then $(CYGPATH_W) 'resampler/resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/resampler.cc'; fi`
	$(am__mv) $(DEPDIR)/resampler.Tpo $(DEPDIR)/resampler.Po
#	source='resampler/resampler.cc' object='resampler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o resampler.obj `if test -f 'resampler/resampler.cc'; then $(CYGPATH_W) 'resampler/resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/resampler.cc'; fi`

sinc_resampler.o: resampler/sinc_resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sinc_resampler.o -MD -MP -MF $(DEPDIR)/sinc_resampler.Tpo -c -o sinc_resampler.o `test -f 'resampler/sinc_resampler.cc' || echo '$(srcdir)/'`resampler/sinc_resampler.cc
	$(am__mv) $(DEPDIR)/sinc_resampler.Tpo $(DEPDIR)/sinc_resampler.Po
#	source='resampler/sinc_resampler.cc' object='sinc_resampler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sinc_resampler.o `test -f 'resampler/sinc_resampler.cc' || echo '$(srcdir)/'`resampler/sinc_resampler.cc

sinc_resampler.obj: resampler/sinc_resampler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sinc_resampler.obj -MD -MP -MF $(DEPDIR)/sinc_resampler.Tpo -c -o sinc_resampler.obj `if test -f 'resampler/sinc_resampler.cc'; then $(CYGPATH_W) 'resampler/sinc_resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/sinc_resampler.cc'; fi`
	$(am__mv) $(DEPDIR)/sinc_resampler.Tpo $(DEPDIR)/sinc_resampler.Po
#	source='resampler/sinc_resampler.cc' object='sinc_resampler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sinc_resampler.obj `if test -f 'resampler/sinc_resampler.cc'; then $(CYGPATH_W) 'resampler/sinc_resampler.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/sinc_resampler.cc'; fi`

sinc_resampler_sse.o: resampler/sinc_resampler_sse.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sinc_resampler_sse.o -MD -MP -MF $(DEPDIR)/sinc_resampler_sse.Tpo -c -o sinc_resampler_sse.o `test -f 'resampler/sinc_resampler_sse.cc' || echo '$(srcdir)/'`resampler/sinc_resampler_sse.cc
	$(am__mv) $(DEPDIR)/sinc_resampler_sse.Tpo $(DEPDIR)/sinc_resampler_sse.Po
#	source='resampler/sinc_resampler_sse.cc' object='sinc_resampler_sse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sinc_resampler_sse.o `test -f 'resampler/sinc_resampler_sse.cc' || echo '$(srcdir)/'`resampler/sinc_resampler_sse.cc

sinc_resampler_sse.obj: resampler/sinc_resampler_sse.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sinc_resampler_sse.obj -MD -MP -MF $(DEPDIR)/sinc_resampler_sse.Tpo -c -o sinc_resampler_sse.obj `if test -f 'resampler/sinc_resampler_sse.cc'; then $(CYGPATH_W) 'resampler/sinc_resampler_sse.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/sinc_resampler_sse.cc'; fi`
	$(am__mv) $(DEPDIR)/sinc_resampler_sse.Tpo $(DEPDIR)/sinc_resampler_sse.Po
#	source='resampler/sinc_resampler_sse.cc' object='sinc_resampler_sse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sinc_resampler_sse.obj `if test -f 'resampler/sinc_resampler_sse.cc'; then $(CYGPATH_W) 'resampler/sinc_resampler_sse.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/sinc_resampler_sse.cc'; fi`

sinusoidal_linear_chirp_source.o: resampler/sinusoidal_linear_chirp_source.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sinusoidal_linear_chirp_source.o -MD -MP -MF $(DEPDIR)/sinusoidal_linear_chirp_source.Tpo -c -o sinusoidal_linear_chirp_source.o `test -f 'resampler/sinusoidal_linear_chirp_source.cc' || echo '$(srcdir)/'`resampler/sinusoidal_linear_chirp_source.cc
	$(am__mv) $(DEPDIR)/sinusoidal_linear_chirp_source.Tpo $(DEPDIR)/sinusoidal_linear_chirp_source.Po
#	source='resampler/sinusoidal_linear_chirp_source.cc' object='sinusoidal_linear_chirp_source.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sinusoidal_linear_chirp_source.o `test -f 'resampler/sinusoidal_linear_chirp_source.cc' || echo '$(srcdir)/'`resampler/sinusoidal_linear_chirp_source.cc

sinusoidal_linear_chirp_source.obj: resampler/sinusoidal_linear_chirp_source.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sinusoidal_linear_chirp_source.obj -MD -MP -MF $(DEPDIR)/sinusoidal_linear_chirp_source.Tpo -c -o sinusoidal_linear_chirp_source.obj `if test -f 'resampler/sinusoidal_linear_chirp_source.cc'; then $(CYGPATH_W) 'resampler/sinusoidal_linear_chirp_source.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/sinusoidal_linear_chirp_source.cc'; fi`
	$(am__mv) $(DEPDIR)/sinusoidal_linear_chirp_source.Tpo $(DEPDIR)/sinusoidal_linear_chirp_source.Po
#	source='resampler/sinusoidal_linear_chirp_source.cc' object='sinusoidal_linear_chirp_source.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sinusoidal_linear_chirp_source.obj `if test -f 'resampler/sinusoidal_linear_chirp_source.cc'; then $(CYGPATH_W) 'resampler/sinusoidal_linear_chirp_source.cc'; else $(CYGPATH_W) '$(srcdir)/resampler/sinusoidal_linear_chirp_source.cc'; fi`

vad.o: vad/vad.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vad.o -MD -MP -MF $(DEPDIR)/vad.Tpo -c -o vad.o `test -f 'vad/vad.cc' || echo '$(srcdir)/'`vad/vad.cc
	$(am__mv) $(DEPDIR)/vad.Tpo $(DEPDIR)/vad.Po
#	source='vad/vad.cc' object='vad.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vad.o `test -f 'vad/vad.cc' || echo '$(srcdir)/'`vad/vad.cc

vad.obj: vad/vad.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vad.obj -MD -MP -MF $(DEPDIR)/vad.Tpo -c -o vad.obj `if test -f 'vad/vad.cc'; then $(CYGPATH_W) 'vad/vad.cc'; else $(CYGPATH_W) '$(srcdir)/vad/vad.cc'; fi`
	$(am__mv) $(DEPDIR)/vad.Tpo $(DEPDIR)/vad.Po
#	source='vad/vad.cc' object='vad.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vad.obj `if test -f 'vad/vad.cc'; then $(CYGPATH_W) 'vad/vad.cc'; else $(CYGPATH_W) '$(srcdir)/vad/vad.cc'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES)
installdirs:
	for dir in "$(DESTDIR)$(libdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-libLIBRARIES install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-libLIBRARIES


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
